import asyncio
from typing import Dict, Optional
from loguru import logger

from core.browser_manager import browser_manager
from core.twitter_client import TwitterClient
from database.db_manager import db_manager
from utils.twitter_helpers import random_delay, human_like_typing


class MemecoinAccountCreator:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥ –º–µ–º–∫–æ–∏–Ω"""

    def __init__(self, account_data: Dict):
        """
        account_data –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å:
        - username: –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞
        - password: –ø–∞—Ä–æ–ª—å
        - email: email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        - email_password: –ø–∞—Ä–æ–ª—å –æ—Ç email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.account_data = account_data
        self.client = None
        self.context = None

    async def setup_account(self, token_name: str, token_address: str,
                            narrative: str, telegram_link: str = None) -> bool:
        """
        –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–¥ –º–µ–º–∫–æ–∏–Ω

        Args:
            token_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BANDGAZ)
            token_address: –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            narrative: –ù–∞—Ä—Ä–∞—Ç–∏–≤/–∏—Å—Ç–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–∞
            telegram_link: –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
            account = await db_manager.add_account(
                username=self.account_data['username'],
                password=self.account_data['password'],
                account_type='memecoin',
                email=self.account_data.get('email'),
                email_password=self.account_data.get('email_password')
            )

            # –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.context = await browser_manager.create_context(account)
            self.client = TwitterClient(account.__dict__, self.context)

            await self.client.initialize()

            # –õ–æ–≥–∏–Ω
            if not await self.client.login():
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç @{account.username}")
                return False

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            await self._setup_profile(token_name, token_address, narrative, telegram_link)

            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞
            await self._create_pinned_tweet(token_name, token_address, narrative)

            logger.info(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –º–µ–º–∫–æ–∏–Ω–∞ @{account.username} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–µ–º–∫–æ–∏–Ω–∞: {e}")
            return False
        finally:
            if self.client:
                await self.client.close()
            if self.context:
                await browser_manager.close_context(self.account_data.get('id', 0))

    async def _setup_profile(self, token_name: str, token_address: str,
                             narrative: str, telegram_link: str = None):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
        logger.info("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –º–µ–º–∫–æ–∏–Ω–∞")

        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        await self.client.page.goto("https://twitter.com/settings/profile", wait_until="networkidle")
        await random_delay(3, 5)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        name_variations = [
            f"{token_name} Labs",
            f"Dr. {token_name}",
            f"{narrative} Technician",
            f"Mr{token_name}",
            f"{narrative}Miner22"
        ]

        import random
        new_name = random.choice(name_variations)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –∏–º–µ–Ω–∏
        name_input = await self.client.page.wait_for_selector('input[name="name"]', timeout=10000)
        await name_input.click()
        await name_input.clear()
        await human_like_typing(self.client.page, new_name)
        await random_delay(1, 2)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (bio)
        bio_templates = [
            f"üö® Survivor of the {narrative} Lab Incident\n"
            f"R&D | ${token_name} Dev | Not financial advice\n"
            f"üìç Somewhere near the blast zone",

            f"‚ö° {narrative} Research Division\n"
            f"${token_name} | Community-driven | DYOR\n"
            f"üî¨ Experimenting with the future",

            f"üí• {narrative} Protocol Engineer\n"
            f"Building ${token_name} | No promises, just vibes\n"
            f"üåê Decentralized chaos",
        ]

        bio = random.choice(bio_templates)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ bio
        bio_input = await self.client.page.wait_for_selector('textarea[name="description"]', timeout=10000)
        await bio_input.click()
        await bio_input.clear()
        await human_like_typing(self.client.page, bio)
        await random_delay(1, 2)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
        if telegram_link or token_address:
            url_input = await self.client.page.wait_for_selector('input[name="url"]', timeout=10000)
            await url_input.click()
            await url_input.clear()

            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Telegram, –µ—Å–ª–∏ –Ω–µ—Ç - —Ç–æ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞
            link = telegram_link if telegram_link else f"https://solscan.io/token/{token_address}"
            await human_like_typing(self.client.page, link)
            await random_delay(1, 2)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        save_button = await self.client.page.wait_for_selector('div[data-testid="Profile_Save_Button"]', timeout=10000)
        await save_button.click()
        await random_delay(3, 5)

        logger.info("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    async def _create_pinned_tweet(self, token_name: str, token_address: str, narrative: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ç–≤–∏—Ç–∞ —Å –Ω–∞—Ä—Ä–∞—Ç–∏–≤–æ–º"""
        logger.info("üìå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞")

        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–≤–∏—Ç–∞
        tweet_templates = [
            f"üí• That's what happens when {narrative} mining rigs go nuclear\n\n"
            f"${token_name} launched: {token_address}\n\n"
            f"#{narrative.lower()} #explosion #crypto",

            f"‚ö° The {narrative} incident changed everything\n\n"
            f"${token_name} is our response: {token_address}\n\n"
            f"#{narrative.lower()} #{token_name.lower()} #defi",

            f"üö® WARNING: {narrative} exposure detected\n\n"
            f"${token_name} protocol activated: {token_address}\n\n"
            f"#crypto #{narrative.lower()} #memecoin",
        ]

        import random
        tweet_text = random.choice(tweet_templates)

        # –ü—É–±–ª–∏–∫—É–µ–º —Ç–≤–∏—Ç
        success = await self.client.tweet(tweet_text)

        if success:
            await random_delay(5, 8)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª—è
            await self.client.page.goto(f"https://twitter.com/{self.account_data['username']}",
                                        wait_until="networkidle")
            await random_delay(3, 5)

            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —Ç–≤–∏—Ç (—Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π)
            first_tweet = await self.client.page.wait_for_selector('article[data-testid="tweet"]', timeout=10000)

            # –ö–ª–∏–∫ –Ω–∞ –º–µ–Ω—é —Ç–≤–∏—Ç–∞ (—Ç—Ä–∏ —Ç–æ—á–∫–∏)
            menu_button = await first_tweet.query_selector('div[data-testid="caret"]')
            if menu_button:
                await menu_button.click()
                await random_delay(1, 2)

                # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ü–∏—é "Pin to profile"
                pin_option = await self.client.page.wait_for_selector('div[role="menuitem"]:has-text("Pin to")',
                                                                      timeout=5000)
                if pin_option:
                    await pin_option.click()
                    await random_delay(2, 3)

                    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    confirm_button = await self.client.page.wait_for_selector(
                        'div[data-testid="confirmationSheetConfirm"]', timeout=5000)
                    if confirm_button:
                        await confirm_button.click()
                        logger.info("‚úÖ –¢–≤–∏—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω")

    async def update_avatar(self, image_path: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –∞–≤–∞—Ç–∞—Ä–∞
        pass

    async def update_header(self, image_path: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é)"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –æ–±–ª–æ–∂–∫–∏
        pass