import asyncio
import random
from typing import List, Dict, Optional
from datetime import datetime
from loguru import logger

from database.db_manager import db_manager
from database.models import ShillerRing, Account, Campaign, Activity
from core.browser_manager import browser_manager
from core.twitter_client import TwitterClient
from utils.twitter_helpers import generate_comment_variation, generate_quote_text, random_delay


class RingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –∫–æ–ª—å—Ü–æ–º —à–∏–ª–ª–µ—Ä–æ–≤"""

    def __init__(self, ring: ShillerRing, campaign: Campaign):
        self.ring = ring
        self.campaign = campaign
        self.members = list(ring.members)
        self.targets = list(ring.targets)
        self.round_number = 0
        self.contexts = {}  # account_id -> BrowserContext
        self.rotation_history = []  # –ò—Å—Ç–æ—Ä–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        for account_id in list(self.contexts.keys()):
            await browser_manager.close_context(account_id)
        self.contexts.clear()
        logger.info(f"üõë –ö–æ–ª—å—Ü–æ {self.ring.id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def execute_round(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–ª—å—Ü–∞"""
        self.round_number += 1
        logger.info(f"üîÑ –ö–æ–ª—å—Ü–æ {self.ring.id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—É–Ω–¥ #{self.round_number}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        interactions = self._generate_rotation(self.round_number)

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        for i, member in enumerate(self.members):
            if i >= len(self.members):
                break

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            context = await browser_manager.get_context_for_account(member)
            self.contexts[member.id] = context

            client = TwitterClient(member.__dict__, context)

            try:
                await client.initialize()

                # –õ–æ–≥–∏–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not client.is_logged_in:
                    if not await client.login():
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ @{member.username}")
                        member.status = "suspended"
                        continue

                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await self._execute_member_actions(client, member, i, interactions)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ @{member.username}: {e}")
            finally:
                await client.close()

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            await random_delay(60, 120)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–æ—Ç–∞—Ü–∏–∏
        await self._save_rotation_history(interactions)

    async def _execute_member_actions(self, client: TwitterClient, member: Account,
                                      position: int, interactions: List[Dict]):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        logger.info(f"üë§ @{member.username} –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∑–∏—Ü–∏—è {position})")

        # 1. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –º–∏—à–µ–Ω—è–º–∏
        my_targets = self._get_member_targets(position)
        comment_text = generate_comment_variation(
            "",
            self.campaign.token_name,
            self.campaign.token_address
        )

        commented = await client.find_and_comment_on_top_posts(
            my_targets,
            comment_text,
            limit=self.ring.comments_per_round
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        for _ in range(commented):
            await self._log_activity(member.id, "comment", comment_text)

        # 2. –õ–∞–π–∫ –∏ —Ü–∏—Ç–∞—Ç–∞ –ø–æ—Å—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if self.campaign.quote_link:
            # –õ–∞–π–∫
            success = await client.like_tweet(self.campaign.quote_link)
            if success:
                await self._log_activity(member.id, "like", self.campaign.quote_link)

            # –¶–∏—Ç–∞—Ç–∞ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏
            quote_text = generate_quote_text(self.campaign.token_name)
            hashtags = await db_manager.get_random_hashtags(3)
            if not hashtags:
                hashtags = ["#Solana", "#Memecoin", f"#{self.campaign.token_name}"]

            success = await client.quote_tweet(
                self.campaign.quote_link,
                quote_text,
                hashtags
            )
            if success:
                await self._log_activity(member.id, "quote", quote_text)

        # 3. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        if position > 0:
            await self._interact_with_previous_members(client, member, position)

        # 4. –ö–æ–ª—å—Ü–µ–≤–æ–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if position == 0 and len(self.members) > 1:
            # –ü–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º
            await self._ring_return(client, member, len(self.members) - 1)

    def _generate_rotation(self, round_num: int) -> List[Dict]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—É–Ω–¥–∞
        –°–ª–µ–¥—É—è –ø—Ä–∏–Ω—Ü–∏–ø—É –∏–∑ –¢–ó: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ç–µ–º –∂–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–≤–∞ —Ä–∞—É–Ω–¥–∞ –ø–æ–¥—Ä—è–¥
        """
        n = len(self.members)
        interactions = []

        # –ë–∞–∑–æ–≤–∞—è —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        if round_num == 1:
            for i in range(n):
                next_idx = (i + 1) % n
                interactions.append({
                    "from": i,
                    "to": next_idx,
                    "from_username": self.members[i].username,
                    "to_username": self.members[next_idx].username
                })
        else:
            # –°–ª–æ–∂–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞—É–Ω–¥–æ–≤
            # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
            last_interactions = self.rotation_history[-1] if self.rotation_history else []
            last_pairs = {(inter["from"], inter["to"]) for inter in last_interactions}

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
            for i in range(n):
                # –ù–∞—Ö–æ–¥–∏–º –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
                possible_partners = list(range(n))
                possible_partners.remove(i)  # –ù–µ —Å —Å–æ–±–æ–π

                # –£–±–∏—Ä–∞–µ–º —Ç–æ–≥–æ, —Å –∫–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑
                for pair in last_pairs:
                    if pair[0] == i and pair[1] in possible_partners:
                        possible_partners.remove(pair[1])

                if possible_partners:
                    partner = random.choice(possible_partners)
                    interactions.append({
                        "from": i,
                        "to": partner,
                        "from_username": self.members[i].username,
                        "to_username": self.members[partner].username
                    })

        return interactions

    def _get_member_targets(self, position: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∏—à–µ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        targets_per_member = self.ring.targets_per_shiller
        start_idx = position * targets_per_member
        end_idx = start_idx + targets_per_member

        member_targets = self.targets[start_idx:end_idx]
        return [t.target_username for t in member_targets]

    async def _interact_with_previous_members(self, client: TwitterClient,
                                              member: Account, position: int):
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ–º —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        prev_member = self.members[position - 1]

        logger.info(f"üí¨ @{member.username} –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å @{prev_member.username}")

        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        # –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∏–º–∏
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ –ª–∞–π–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        await random_delay(5, 10)

        # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        reply_variations = [
            "–ª–æ–ª –¥–∞, –ø—Ä—è–º –∫–∞–∫ $PEPE",
            "—ç—Ç–æ —Ç–æ—á–Ω–æ üöÄ",
            "—Å–æ–≥–ª–∞—Å–µ–Ω, –≤–∞–π–± –º–æ—â–Ω—ã–π",
            "–Ω—É —ç—Ç–æ –∏–º–±–∞ –ø—Ä–æ—Å—Ç–æ",
            "—Ñ–∞–∫—Ç—ã üíØ",
        ]
        reply = random.choice(reply_variations)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        await self._log_activity(member.id, "reply", reply)
        await self._log_activity(member.id, "like", f"comment_from_{prev_member.username}")

    async def _ring_return(self, client: TwitterClient, member: Account, last_position: int):
        """–ö–æ–ª—å—Ü–µ–≤–æ–π –≤–æ–∑–≤—Ä–∞—Ç - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º"""
        last_member = self.members[last_position]

        logger.info(f"üîÑ –ö–æ–ª—å—Ü–µ–≤–æ–π –≤–æ–∑–≤—Ä–∞—Ç: @{member.username} ‚Üí @{last_member.username}")

        # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –æ—Ç–≤–µ—Ç–∞
        await random_delay(5, 10)

        reply = "–∑–∞–º—ã–∫–∞–µ–º –∫—Ä—É–≥ üî•"
        await self._log_activity(member.id, "reply", reply)

    async def _log_activity(self, account_id: int, action_type: str, content: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ë–î"""
        async with db_manager.get_async_session() as session:
            activity = Activity(
                account_id=account_id,
                campaign_id=self.campaign.id,
                action_type=action_type,
                content=content,
                status="success",
                created_at=datetime.utcnow()
            )
            session.add(activity)
            await session.commit()

    async def _save_rotation_history(self, interactions: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–æ—Ç–∞—Ü–∏–∏"""
        self.rotation_history.append(interactions)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with db_manager.get_async_session() as session:
            from database.models import ShillerRotation

            rotation = ShillerRotation(
                ring_id=self.ring.id,
                round_number=self.round_number,
                interactions=interactions,
                created_at=datetime.utcnow()
            )
            session.add(rotation)
            await session.commit()

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—É–Ω–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
        if len(self.rotation_history) > 5:
            self.rotation_history = self.rotation_history[-5:]