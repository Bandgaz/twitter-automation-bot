import asyncio
from typing import List, Dict, Optional
from datetime import datetime
from loguru import logger
import random

from database.db_manager import db_manager
from database.models import Campaign, ShillerRing, Account, Activity
from core.browser_manager import browser_manager
from core.twitter_client import TwitterClient
from utils.twitter_helpers import generate_comment_variation, generate_quote_text
from .ring_manager import RingManager


class ShillingEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º —à–∏–ª–ª–∏–Ω–≥–∞"""

    def __init__(self, campaign: Campaign):
        self.campaign = campaign
        self.is_running = False
        self.rounds_completed = 0
        self.ring_managers = {}  # ring_id -> RingManager
        self.tasks = []

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –¥–≤–∏–∂–∫–∞ —à–∏–ª–ª–∏–Ω–≥–∞"""
        if self.is_running:
            logger.warning("–î–≤–∏–∂–æ–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —à–∏–ª–ª–∏–Ω–≥–∞ –¥–ª—è ${self.campaign.token_name}")

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–ª—å—Ü–∞
        async with db_manager.get_async_session() as session:
            from sqlalchemy import select
            from sqlalchemy.orm import selectinload

            result = await session.execute(
                select(ShillerRing)
                .where(ShillerRing.is_active == True)
                .options(
                    selectinload(ShillerRing.members),
                    selectinload(ShillerRing.targets)
                )
            )
            rings = result.scalars().all()

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–ª—å—Ü–∞
        for ring in rings:
            manager = RingManager(ring, self.campaign)
            self.ring_managers[ring.id] = manager

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–æ–ª—å—Ü–∞
            task = asyncio.create_task(self._run_ring_loop(manager))
            self.tasks.append(task)

        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self.ring_managers)} –∫–æ–ª–µ—Ü")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–∫–∞"""
        self.is_running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        for manager in self.ring_managers.values():
            await manager.stop()

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks:
            task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.gather(*self.tasks, return_exceptions=True)

        self.tasks.clear()
        self.ring_managers.clear()

        logger.info("üõë –î–≤–∏–∂–æ–∫ —à–∏–ª–ª–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _run_ring_loop(self, manager: RingManager):
        """–¶–∏–∫–ª —Ä–∞–±–æ—Ç—ã –æ–¥–Ω–æ–≥–æ –∫–æ–ª—å—Ü–∞"""
        while self.is_running:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –∫–æ–ª—å—Ü–∞
                await manager.execute_round()
                self.rounds_completed += 1

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏ (30-60 –º–∏–Ω—É—Ç)
                delay = random.randint(1800, 3600)
                logger.info(f"‚è± –ö–æ–ª—å—Ü–æ {manager.ring.id} –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞—É–Ω–¥. –ü–∞—É–∑–∞ {delay // 60} –º–∏–Ω—É—Ç")
                await asyncio.sleep(delay)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–ª—å—Ü–µ {manager.ring.id}: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


class RingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–∏–º –∫–æ–ª—å—Ü–æ–º —à–∏–ª–ª–µ—Ä–æ–≤"""

    def __init__(self, ring: ShillerRing, campaign: Campaign):
        self.ring = ring
        self.campaign = campaign
        self.members = list(ring.members)
        self.targets = list(ring.targets)
        self.round_number = 0
        self.contexts = {}  # account_id -> BrowserContext

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        for account_id, context in self.contexts.items():
            await browser_manager.close_context(account_id)
        self.contexts.clear()

    async def execute_round(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–ª—å—Ü–∞"""
        self.round_number += 1
        logger.info(f"üîÑ –ö–æ–ª—å—Ü–æ {self.ring.id} –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—É–Ω–¥ #{self.round_number}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞
        interactions = self._generate_rotation(self.round_number)

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        for i, member in enumerate(self.members):
            if i >= len(self.members):
                break

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
            context = await browser_manager.get_context_for_account(member)
            self.contexts[member.id] = context

            client = TwitterClient(member.__dict__, context)

            try:
                await client.initialize()

                # –õ–æ–≥–∏–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not client.is_logged_in:
                    if not await client.login():
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ @{member.username}")
                        continue

                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                await self._execute_member_actions(client, member, i, interactions)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ @{member.username}: {e}")
            finally:
                await client.close()

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            await asyncio.sleep(random.randint(60, 120))

    async def _execute_member_actions(self, client: TwitterClient, member: Account,
                                      position: int, interactions: List[Dict]):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        logger.info(f"üë§ @{member.username} –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è")

        # 1. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –º–∏—à–µ–Ω—è–º–∏
        my_targets = self._get_member_targets(position)
        comment_text = generate_comment_variation(
            "",
            self.campaign.token_name,
            self.campaign.token_address
        )

        commented = await client.find_and_comment_on_top_posts(
            my_targets,
            comment_text,
            limit=self.ring.comments_per_round
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await self._log_activity(member.id, "comment", comment_text, commented)

        # 2. –õ–∞–π–∫ –∏ —Ü–∏—Ç–∞—Ç–∞ –ø–æ—Å—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if self.campaign.quote_link:
            # –õ–∞–π–∫
            await client.like_tweet(self.campaign.quote_link)
            await self._log_activity(member.id, "like", self.campaign.quote_link)

            # –¶–∏—Ç–∞—Ç–∞ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏
            quote_text = generate_quote_text(self.campaign.token_name)
            hashtags = ["#Solana", "#Memecoin", f"#{self.campaign.token_name}"]

            await client.quote_tweet(
                self.campaign.quote_link,
                quote_text,
                hashtags
            )
            await self._log_activity(member.id, "quote", quote_text)

        # 3. –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        if position > 0:
            await self._interact_with_previous_members(client, member, position)

        # 4. –ö–æ–ª—å—Ü–µ–≤–æ–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if position == 0 and self.round_number > 1:
            await self._ring_return(client, member)

    def _generate_rotation(self, round_num: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ö–µ–º—É —Ä–æ—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—É–Ω–¥–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ –¢–ó
        n = len(self.members)
        interactions = []

        for i in range(n):
            next_idx = (i + round_num) % n
            if i != next_idx:
                interactions.append({
                    "from": i,
                    "to": next_idx
                })

        return interactions

    def _get_member_targets(self, position: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –º–∏—à–µ–Ω–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        targets_per_member = self.ring.targets_per_shiller
        start_idx = position * targets_per_member
        end_idx = start_idx + targets_per_member

        member_targets = self.targets[start_idx:end_idx]
        return [t.target_username for t in member_targets]

    async def _interact_with_previous_members(self, client: TwitterClient,
                                              member: Account, position: int):
        """–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        # –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–∏–º–∏ (–ª–∞–π–∫–∏, –æ—Ç–≤–µ—Ç—ã)
        pass

    async def _ring_return(self, client: TwitterClient, member: Account):
        """–ö–æ–ª—å—Ü–µ–≤–æ–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        # –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ
        pass

    async def _log_activity(self, account_id: int, action_type: str,
                            content: str, count: int = 1):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        async with db_manager.get_async_session() as session:
            for _ in range(count):
                activity = Activity(
                    account_id=account_id,
                    campaign_id=self.campaign.id,
                    action_type=action_type,
                    content=content,
                    status="success",
                    created_at=datetime.utcnow()
                )
                session.add(activity)
            await session.commit()