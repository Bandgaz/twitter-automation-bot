import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from loguru import logger
import random

from database.db_manager import db_manager
from database.models import Account, InfluencerSource, Activity
from core.browser_manager import browser_manager
from core.twitter_client import TwitterClient
from utils.twitter_helpers import calculate_sleep_schedule, generate_hashtags
from .content_generator import ContentGenerator


class InfluencerActivityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤"""

    def __init__(self):
        self.is_running = False
        self.tasks = {}  # account_id -> asyncio.Task
        self.content_generator = ContentGenerator()

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        if self.is_running:
            logger.warning("–ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
        influencers = await db_manager.get_accounts_by_type("influencer")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞
        for influencer in influencers:
            if influencer.status == "active":
                task = asyncio.create_task(self._run_influencer_loop(influencer))
                self.tasks[influencer.id] = task

        logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ {len(self.tasks)} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.is_running = False

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.tasks.values():
            task.cancel()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.gather(*self.tasks.values(), return_exceptions=True)
        self.tasks.clear()

        logger.info("üõë –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def _run_influencer_loop(self, account: Account):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞"""
        logger.info(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –¥–ª—è @{account.username}")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞
        context = await browser_manager.create_context(account)
        client = TwitterClient(account.__dict__, context)

        try:
            await client.initialize()

            # –õ–æ–≥–∏–Ω
            if not await client.login():
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ @{account.username}")
                account.status = "suspended"
                await db_manager.update_account_status(account.id, "suspended")
                return

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–Ω–∞
                    schedule = calculate_sleep_schedule(
                        work_hours=10,
                        sleep_hours=14
                    )

                    if not schedule['is_working']:
                        # –í—Ä–µ–º—è —Å–ø–∞—Ç—å
                        sleep_until = schedule['next_sleep']
                        sleep_duration = (sleep_until - datetime.now()).total_seconds()
                        logger.info(f"üò¥ @{account.username} —Å–ø–∏—Ç –¥–æ {sleep_until}")
                        await asyncio.sleep(sleep_duration)
                        continue

                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
                    await self._perform_random_action(client, account)

                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                    delay = random.randint(300, 900)  # 5-15 –º–∏–Ω—É—Ç
                    await asyncio.sleep(delay)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ @{account.username}: {e}")
                    await asyncio.sleep(60)

        finally:
            await client.close()
            await browser_manager.close_context(account.id)

    async def _perform_random_action(self, client: TwitterClient, account: Account):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        actions = [
            ("post", 0.2),  # 20% - –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
            ("comment", 0.4),  # 40% - –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            ("like", 0.3),  # 30% - –ª–∞–π–∫–∏
            ("quote", 0.1),  # 10% - —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        ]

        # –í—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –≤–µ—Å–∞–º
        action = random.choices(
            [a[0] for a in actions],
            weights=[a[1] for a in actions]
        )[0]

        logger.info(f"üéØ @{account.username} –≤—ã–ø–æ–ª–Ω—è–µ—Ç: {action}")

        if action == "post":
            await self._create_post(client, account)
        elif action == "comment":
            await self._create_comment(client, account)
        elif action == "like":
            await self._like_posts(client, account)
        elif action == "quote":
            await self._quote_post(client, account)

    async def _create_post(self, client: TwitterClient, account: Account):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = account.influencer_sources
        if not sources:
            logger.warning(f"–£ @{account.username} –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏
        source = self._select_source_by_importance(sources)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        content = await self.content_generator.generate_from_source(
            source.source_username
        )

        if content:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
            hashtags = await db_manager.get_random_hashtags(3)

            # –ü—É–±–ª–∏–∫—É–µ–º
            success = await client.tweet(content, hashtags)

            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            await self._log_activity(
                account.id,
                "tweet",
                content=content,
                status="success" if success else "failed"
            )

    async def _create_comment(self, client: TwitterClient, account: Account):
        """–°–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ä—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        target_accounts = [
            "binance", "coinbase", "solana", "ethereum",
            "VitalikButerin", "cz_binance", "SBF_FTX"
        ]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        from utils.twitter_helpers import generate_influencer_comment
        comment = generate_influencer_comment()

        # –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
        commented = await client.find_and_comment_on_top_posts(
            target_accounts,
            comment,
            limit=1
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await self._log_activity(
            account.id,
            "comment",
            content=comment,
            status="success" if commented > 0 else "failed"
        )

    async def _like_posts(self, client: TwitterClient, account: Account):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏ –Ω–∞ –ø–æ—Å—Ç—ã"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ª–∞–π–∫–æ–≤
        pass

    async def _quote_post(self, client: TwitterClient, account: Account):
        """–ü—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –¥—Ä—É–≥–æ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        pass

    def _select_source_by_importance(self, sources: List[InfluencerSource]) -> InfluencerSource:
        """–í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ —Å —É—á–µ—Ç–æ–º –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        if not sources:
            return None

        # –í—ã–±–∏—Ä–∞–µ–º —Å —É—á–µ—Ç–æ–º –≤–µ—Å–∞ importance_score
        weights = [s.importance_score for s in sources]
        return random.choices(sources, weights=weights)[0]

    async def _log_activity(self, account_id: int, action_type: str,
                            content: str = None, status: str = "success"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ë–î"""
        async with db_manager.get_async_session() as session:
            activity = Activity(
                account_id=account_id,
                action_type=action_type,
                content=content,
                status=status,
                created_at=datetime.utcnow()
            )
            session.add(activity)
            await session.commit()