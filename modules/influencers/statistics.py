from datetime import datetime, timedelta
from typing import Dict, List, Optional
from sqlalchemy import select, func, and_
from loguru import logger

from database.db_manager import db_manager
from database.models import Account, Activity


class InfluencerStatistics:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤"""

    @staticmethod
    async def get_daily_stats(account_id: int, date: datetime = None) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞

        Args:
            account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞
            date: –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not date:
            date = datetime.now().date()
        else:
            date = date.date()

        async with db_manager.get_async_session() as session:
            # –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º
            result = await session.execute(
                select(
                    Activity.action_type,
                    func.count(Activity.id).label('count')
                )
                .where(
                    and_(
                        Activity.account_id == account_id,
                        func.date(Activity.created_at) == date
                    )
                )
                .group_by(Activity.action_type)
            )

            activities = {row.action_type: row.count for row in result}

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account = await session.get(Account, account_id)

            return {
                "account_id": account_id,
                "username": account.username if account else "Unknown",
                "date": date.isoformat(),
                "posts": activities.get("tweet", 0),
                "comments": activities.get("comment", 0),
                "likes": activities.get("like", 0),
                "retweets": activities.get("retweet", 0),
                "quotes": activities.get("quote", 0),
                "total_actions": sum(activities.values()),
                "followers_count": account.followers_count if account else 0,
                "following_count": account.following_count if account else 0,
            }

    @staticmethod
    async def get_weekly_stats(account_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é"""
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=7)

        async with db_manager.get_async_session() as session:
            result = await session.execute(
                select(
                    func.date(Activity.created_at).label('date'),
                    Activity.action_type,
                    func.count(Activity.id).label('count')
                )
                .where(
                    and_(
                        Activity.account_id == account_id,
                        func.date(Activity.created_at) >= start_date,
                        func.date(Activity.created_at) <= end_date
                    )
                )
                .group_by(func.date(Activity.created_at), Activity.action_type)
                .order_by(func.date(Activity.created_at))
            )

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_stats = {}
            for row in result:
                date_str = row.date.isoformat() if hasattr(row.date, 'isoformat') else str(row.date)
                if date_str not in daily_stats:
                    daily_stats[date_str] = {
                        "posts": 0,
                        "comments": 0,
                        "likes": 0,
                        "quotes": 0,
                    }

                if row.action_type == "tweet":
                    daily_stats[date_str]["posts"] = row.count
                elif row.action_type == "comment":
                    daily_stats[date_str]["comments"] = row.count
                elif row.action_type == "like":
                    daily_stats[date_str]["likes"] = row.count
                elif row.action_type == "quote":
                    daily_stats[date_str]["quotes"] = row.count

            return {
                "account_id": account_id,
                "period": "week",
                "start_date": start_date.isoformat(),
                "end_date": end_date.isoformat(),
                "daily_breakdown": daily_stats,
                "total_posts": sum(day["posts"] for day in daily_stats.values()),
                "total_comments": sum(day["comments"] for day in daily_stats.values()),
                "total_likes": sum(day["likes"] for day in daily_stats.values()),
                "total_quotes": sum(day["quotes"] for day in daily_stats.values()),
            }

    @staticmethod
    async def get_all_influencers_stats(date: datetime = None) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∑–∞ –¥–µ–Ω—å"""
        if not date:
            date = datetime.now().date()
        else:
            date = date.date()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
        influencers = await db_manager.get_accounts_by_type("influencer")

        stats = []
        for influencer in influencers:
            daily_stats = await InfluencerStatistics.get_daily_stats(influencer.id,
                                                                     datetime.combine(date, datetime.min.time()))
            stats.append(daily_stats)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–µ–π—Å—Ç–≤–∏–π
        stats.sort(key=lambda x: x["total_actions"], reverse=True)

        return stats

    @staticmethod
    async def get_engagement_rate(account_id: int, period_days: int = 7) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å engagement rate –∑–∞ –ø–µ—Ä–∏–æ–¥

        Engagement Rate = (Likes + Comments + Retweets) / Posts / Followers * 100
        """
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=period_days)

        async with db_manager.get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account = await session.get(Account, account_id)
            if not account or account.followers_count == 0:
                return 0.0

            # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            result = await session.execute(
                select(
                    Activity.action_type,
                    func.count(Activity.id).label('count')
                )
                .where(
                    and_(
                        Activity.account_id == account_id,
                        func.date(Activity.created_at) >= start_date,
                        func.date(Activity.created_at) <= end_date,
                        Activity.action_type.in_(["tweet", "like", "comment", "retweet"])
                    )
                )
                .group_by(Activity.action_type)
            )

            activities = {row.action_type: row.count for row in result}

            posts = activities.get("tweet", 0)
            if posts == 0:
                return 0.0

            engagements = activities.get("like", 0) + activities.get("comment", 0) + activities.get("retweet", 0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º engagement rate
            engagement_rate = (engagements / posts / account.followers_count) * 100

            return round(engagement_rate, 2)

    @staticmethod
    async def get_best_posting_times(account_id: int, period_days: int = 30) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        end_date = datetime.now()
        start_date = end_date - timedelta(days=period_days)

        async with db_manager.get_async_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
            result = await session.execute(
                select(
                    func.extract('hour', Activity.created_at).label('hour'),
                    func.count(Activity.id).label('count')
                )
                .where(
                    and_(
                        Activity.account_id == account_id,
                        Activity.created_at >= start_date,
                        Activity.created_at <= end_date,
                        Activity.action_type == "tweet"
                    )
                )
                .group_by(func.extract('hour', Activity.created_at))
                .order_by(func.count(Activity.id).desc())
            )

            hourly_distribution = {int(row.hour): row.count for row in result}

            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø-3 —á–∞—Å–∞
            sorted_hours = sorted(hourly_distribution.items(), key=lambda x: x[1], reverse=True)
            best_hours = [hour for hour, count in sorted_hours[:3]]

            return {
                "best_hours": best_hours,
                "hourly_distribution": hourly_distribution,
                "recommendation": f"–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞: {best_hours[0]}:00 - {best_hours[0] + 1}:00" if best_hours else "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            }

    @staticmethod
    async def generate_report(account_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        daily = await InfluencerStatistics.get_daily_stats(account_id)
        weekly = await InfluencerStatistics.get_weekly_stats(account_id)
        engagement = await InfluencerStatistics.get_engagement_rate(account_id)
        best_times = await InfluencerStatistics.get_best_posting_times(account_id)

        report = f"""
üìä –û–¢–ß–ï–¢ –ò–ù–§–õ–Æ–ï–ù–°–ï–†–ê @{daily['username']}
{'=' * 40}

üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({daily['date']}):
‚Ä¢ –ü–æ—Å—Ç–æ–≤: {daily['posts']}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {daily['comments']}
‚Ä¢ –õ–∞–π–∫–æ–≤: {daily['likes']}
‚Ä¢ –¶–∏—Ç–∞—Ç: {daily['quotes']}
‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {daily['total_actions']}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:
‚Ä¢ –ü–æ—Å—Ç–æ–≤: {weekly['total_posts']}
‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {weekly['total_comments']}
‚Ä¢ –õ–∞–π–∫–æ–≤: {weekly['total_likes']}
‚Ä¢ –¶–∏—Ç–∞—Ç: {weekly['total_quotes']}

üíé –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {daily['followers_count']}
‚Ä¢ –ü–æ–¥–ø–∏—Å–æ–∫: {daily['following_count']}
‚Ä¢ Engagement Rate: {engagement}%

‚è∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{best_times['recommendation']}

{'=' * 40}
        """

        return report.strip()