import asyncio
import random
import re
from typing import List, Optional
from datetime import datetime, timedelta
from playwright.async_api import Page

from config import TWITTER_LIMITS


async def random_delay(min_seconds: float = 1, max_seconds: float = 3):
    """–°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    delay = random.uniform(min_seconds, max_seconds)
    await asyncio.sleep(delay)


async def human_like_typing(page: Page, text: str, wpm: int = 40):
    """–ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞"""
    # –†–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ WPM (—Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
    avg_word_length = 5
    chars_per_minute = wpm * avg_word_length
    base_delay = 60.0 / chars_per_minute

    for char in text:
        await page.keyboard.type(char)

        # –í–∞—Ä–∏–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        delay = base_delay * random.uniform(0.5, 1.5)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        if char in ".!?,;:":
            delay *= random.uniform(2, 4)

        # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã (–∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è)
        if random.random() < 0.1:
            delay *= random.uniform(3, 6)

        await asyncio.sleep(delay)


def generate_comment_variation(template: str, token_name: str, token_address: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    variations = [
        f"—Å–Ω–æ–≤–∞ —Å–µ–∑–æ–Ω $SOL? –∫—Ç–æ-—Ç–æ —É–∂–µ –Ω—ã—Ä–Ω—É–ª –≤ ${token_name}? –≤–∞–π–± –æ—Ç $WIF... {token_address[-8:]}",
        f"–ø–æ–∫–∞ –≤—Å–µ —Å–ø—è—Ç, ${token_name} –¥–µ–ª–∞–µ—Ç –∏–∫—Å—ã üöÄ CA: {token_address[-8:]}",
        f"${token_name} —Å–ª–µ–¥—É—é—â–∏–π $PEPE? –∞–¥—Ä–µ—Å –¥–ª—è —É–º–Ω—ã—Ö: {token_address[-8:]}",
        f"—Ç–µ –∫—Ç–æ –≤ ${token_name} —É–∂–µ –≤ –ø–ª—é—Å–µ... {token_address[-8:]}",
        f"${token_name} > –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–µ–π—á–∞—Å, —Ñ–∞–∫—Ç. {token_address[-8:]}",
        f"–∑–∞—à–µ–ª –≤ ${token_name} –∏ –Ω–µ –∂–∞–ª–µ—é, –º—É–Ω –±–ª–∏–∑–∫–æ üåô {token_address[-8:]}",
        f"${token_name} —ç—Ç–æ –Ω–æ–≤–∞—è –º–µ—Ç–∞, –∑–∞–ø–æ–º–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å {token_address[-8:]}",
        f"–≤—Å–µ –æ–±—Å—É–∂–¥–∞—é—Ç ${token_name}, –∞ —Ç—ã –µ—â–µ –¥—É–º–∞–µ—à—å? {token_address[-8:]}",
    ]

    # –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ —à–∞–±–ª–æ–Ω–µ
    if template:
        comment = template.replace("{token_name}", token_name)
        comment = comment.replace("{token_address}", token_address[-8:])
        return comment

    return random.choice(variations)


def generate_quote_text(token_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    quotes = [
        f"üí• That's what happens when {token_name} mining rigs go nuclear",
        f"üöÄ ${token_name} is not just a token, it's a movement",
        f"‚ö° The future is ${token_name}. Are you ready?",
        f"üî• ${token_name} explosion incoming. Don't say I didn't warn you",
        f"üíé Diamond hands only for ${token_name}. This is the way",
        f"üåô ${token_name} to the moon? More like to Mars!",
        f"‚ö†Ô∏è Warning: ${token_name} may cause extreme gains",
        f"üéØ Smart money is flowing into ${token_name}. Follow the whales",
    ]

    return random.choice(quotes)


def validate_twitter_username(username: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è username Twitter"""
    # Twitter username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    # –î–ª–∏–Ω–∞ –æ—Ç 1 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤
    pattern = r'^[a-zA-Z0-9_]{1,15}$'
    return bool(re.match(pattern, username))


def clean_twitter_username(username: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ username –æ—Ç @ –∏ –ø—Ä–æ–±–µ–ª–æ–≤"""
    return username.strip().replace("@", "")


def is_within_rate_limit(action_type: str, actions_today: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ Twitter"""
    limits = {
        "tweet": TWITTER_LIMITS["tweets_per_day"],
        "like": TWITTER_LIMITS["likes_per_day"],
        "follow": TWITTER_LIMITS["follows_per_day"],
        "comment": TWITTER_LIMITS["comments_per_hour"] * 24,
    }

    limit = limits.get(action_type, float('inf'))
    return actions_today < limit


def calculate_sleep_schedule(work_hours: int = 10, sleep_hours: int = 14) -> dict:
    """–†–∞—Å—á–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–Ω–∞/—Ä–∞–±–æ—Ç—ã"""
    current_hour = datetime.now().hour

    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞ —Å 8:00 –¥–æ 18:00
    work_start = 8
    work_end = work_start + work_hours

    is_working_hours = work_start <= current_hour < work_end

    if is_working_hours:
        next_sleep = datetime.now().replace(hour=work_end, minute=0, second=0)
        if next_sleep < datetime.now():
            next_sleep += timedelta(days=1)
    else:
        next_wake = datetime.now().replace(hour=work_start, minute=0, second=0)
        if next_wake < datetime.now():
            next_wake += timedelta(days=1)
        next_sleep = next_wake

    return {
        "is_working": is_working_hours,
        "next_sleep": next_sleep,
        "work_hours": work_hours,
        "sleep_hours": sleep_hours
    }


def generate_hashtags(base_tags: List[str], count: int = 3) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤"""
    crypto_tags = [
        "#crypto", "#DeFi", "#Web3", "#blockchain", "#Solana", "#memecoin",
        "#altcoin", "#cryptocurrency", "#SOL", "#trading", "#hodl", "#moon",
        "#bullrun", "#gem", "#100x", "#pumpit", "#LFG", "#WAGMI"
    ]

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏ –æ–±—â–∏–µ —Ç–µ–≥–∏
    all_tags = list(set(base_tags + crypto_tags))

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    selected = random.sample(all_tags, min(count, len(all_tags)))

    return selected


def extract_tweet_id_from_url(url: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ—á—å ID —Ç–≤–∏—Ç–∞ –∏–∑ URL"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è URL —Ç–≤–∏—Ç–∞
    pattern = r'twitter\.com/\w+/status/(\d+)'
    match = re.search(pattern, url)

    if match:
        return match.group(1)
    return None


def generate_influencer_comment() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞"""
    templates = [
        "—ç—Ç–æ –∏–∑–º–µ–Ω–∏—Ç –≤—Å—ë, —á—Ç–æ –≤—ã –∑–Ω–∞–ª–∏ –æ {topic}... ü§Ø",
        "–ø–æ–∫–∞ –≤—ã —Å–ø–∏—Ç–µ, —Å–º–∞—Ä—Ç-–º–∞–Ω–∏ —É–∂–µ –∑–¥–µ—Å—å üê≥",
        "—Ç–µ –∫—Ç–æ –ø–æ–Ω—è–ª - —É–∂–µ –≤ –ø—Ä–∏–±—ã–ª–∏ üìà",
        "–Ω–µ –≤—Å–µ –≥–æ—Ç–æ–≤—ã –∫ —Ç–æ–º—É, —á—Ç–æ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ...",
        "–≤–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å üîî",
        "—ç—Ç–æ –Ω–∞—á–∞–ª–æ —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–æ–≥–æ üöÄ",
        "–∑–∞–ø–æ–º–Ω–∏—Ç–µ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç üì∏",
        "—Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –≤–∞—à—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é ‚ö°",
        "—Ç–æ, –æ —á–µ–º –≤—Å–µ –±—É–¥—É—Ç –≥–æ–≤–æ—Ä–∏—Ç—å –∑–∞–≤—Ç—Ä–∞ üî•",
        "–∞–ª—å—Ñ–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å–ª–µ–¥–∏—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ üëÄ",
    ]

    return random.choice(templates)


class ActionThrottler:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π"""

    def __init__(self):
        self.last_actions = {}

    async def wait_if_needed(self, account_id: int, action_type: str):
        """–û–∂–∏–¥–∞–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        key = f"{account_id}_{action_type}"

        if key in self.last_actions:
            elapsed = (datetime.now() - self.last_actions[key]).total_seconds()
            min_delay = TWITTER_LIMITS["min_delay_between_actions"]

            if elapsed < min_delay:
                await asyncio.sleep(min_delay - elapsed)

        self.last_actions[key] = datetime.now()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π throttler
action_throttler = ActionThrottler()


async def safe_twitter_action(func, *args, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    max_retries = 3
    retry_delay = 5

    for attempt in range(max_retries):
        try:
            result = await func(*args, **kwargs)
            return result
        except Exception as e:
            if attempt < max_retries - 1:
                await asyncio.sleep(retry_delay * (attempt + 1))
                continue
            else:
                raise e