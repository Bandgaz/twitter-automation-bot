from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters
from loguru import logger
import asyncio
from typing import List

from ..keyboards.main_kb import get_accounts_proxy_keyboard, get_back_keyboard, get_cancel_keyboard
from database.db_manager import db_manager
from database.models import Account, Proxy, ShillerRing, Hashtag
from utils.validators import validate_proxy_format, validate_account_format

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ACCOUNTS_INPUT = 1
PROXY_INPUT = 2
HASHTAGS_INPUT = 3
RING_SIZE_INPUT = 4
TARGETS_INPUT = 5


async def accounts_proxy_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    await query.answer()

    message = (
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–∫—Å–∏\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∏ —à–∏–ª–ª–µ—Ä–æ–≤\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ö—ç—à—Ç–µ–≥–∞–º–∏\n"
        "‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª—å—Ü–∞ —à–∏–ª–ª–µ—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await query.edit_message_text(
        message,
        reply_markup=get_accounts_proxy_keyboard()
    )


async def add_influencer_accounts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'accounts_proxy'

    message = (
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`username:password:email:email_password`\n\n"
        "–ü–æ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.\n"
        "Email –∏ –ø–∞—Ä–æ–ª—å –æ—Ç email –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`john_doe:Pass123:john@mail.com:EmailPass123`\n"
        "`jane_smith:Pass456`"
    )

    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['account_type'] = 'influencer'
    context.user_data['waiting_for'] = 'accounts_input'


async def add_shiller_accounts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —à–∏–ª–ª–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'accounts_proxy'

    message = (
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —à–∏–ª–ª–µ—Ä–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`username:password:email:email_password`\n\n"
        "–ü–æ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫—É.\n"
        "Email –∏ –ø–∞—Ä–æ–ª—å –æ—Ç email –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "`shill_bot1:Pass123`\n"
        "`shill_bot2:Pass456`"
    )

    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['account_type'] = 'shiller'
    context.user_data['waiting_for'] = 'accounts_input'


async def process_accounts_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if context.user_data.get('waiting_for') != 'accounts_input':
        return

    text = update.message.text
    account_type = context.user_data.get('account_type', 'influencer')

    # –ü–∞—Ä—Å–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã
    lines = text.strip().split('\n')
    added_count = 0
    errors = []

    for line in lines:
        try:
            parts = line.strip().split(':')
            if len(parts) < 2:
                errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {line}")
                continue

            username = parts[0].strip()
            password = parts[1].strip()
            email = parts[2].strip() if len(parts) > 2 else None
            email_password = parts[3].strip() if len(parts) > 3 else None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç
            async with db_manager.get_async_session() as session:
                from sqlalchemy import select
                existing = await session.execute(
                    select(Account).where(Account.username == username)
                )
                if existing.scalar():
                    errors.append(f"–ê–∫–∫–∞—É–Ω—Ç @{username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
            account = await db_manager.add_account(
                username=username,
                password=password,
                account_type=account_type,
                email=email,
                email_password=email_password
            )
            added_count += 1
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: @{username} ({account_type})")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {line}: {e}")
            errors.append(f"–û—à–∏–±–∫–∞ —Å {parts[0] if parts else line}: {str(e)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {added_count}\n"
    if errors:
        response += f"\n‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(errors[:5])
        if len(errors) > 5:
            response += f"\n... –∏ –µ—â–µ {len(errors) - 5} –æ—à–∏–±–æ–∫"

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.clear()

    await update.message.reply_text(
        response,
        reply_markup=get_back_keyboard("accounts_proxy")
    )


async def list_accounts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()

    try:
        async with db_manager.get_async_session() as session:
            from sqlalchemy import select
            from database.models import Account

            result = await session.execute(select(Account))
            accounts = result.scalars().all()

            account_lines = []
            for acc in accounts[:20]:
                account_lines.append(
                    f"@{acc.username} ‚Äî {acc.status or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
                )

        message = (
            "üë• –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n" +
            "\n".join(account_lines) +
            f"\n\n–í—Å–µ–≥–æ: {len(accounts)}"
        )

        await query.edit_message_text(
            message,
            reply_markup=get_back_keyboard("accounts_proxy")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤",
            reply_markup=get_back_keyboard("accounts_proxy")
        )


async def add_proxy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'accounts_proxy'

    message = (
        "üõ† –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`protocol://username:password@host:port`\n"
        "–∏–ª–∏\n"
        "`host:port:username:password`\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: http, socks5\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "`http://user123:pass123@1.2.3.4:8080`\n"
        "`1.2.3.4:8080:user123:pass123`"
    )

    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'proxy_input'


async def process_proxy_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏"""
    if context.user_data.get('waiting_for') != 'proxy_input':
        return

    text = update.message.text
    lines = text.strip().split('\n')
    added_count = 0
    errors = []

    for line in lines:
        try:
            # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏
            proxy_data = validate_proxy_format(line.strip())
            if proxy_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø—Ä–æ–∫—Å–∏
                async with db_manager.get_async_session() as session:
                    from sqlalchemy import select
                    existing = await session.execute(
                        select(Proxy).where(
                            (Proxy.host == proxy_data['host']) &
                            (Proxy.port == proxy_data['port'])
                        )
                    )
                    if existing.scalar():
                        errors.append(f"–ü—Ä–æ–∫—Å–∏ {proxy_data['host']}:{proxy_data['port']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        continue

                proxy = await db_manager.add_proxy(
                    host=proxy_data['host'],
                    port=proxy_data['port'],
                    username=proxy_data.get('username'),
                    password=proxy_data.get('password'),
                    protocol=proxy_data.get('protocol', 'http')
                )
                added_count += 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–∫—Å–∏: {proxy_data['host']}:{proxy_data['port']}")
            else:
                errors.append(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {line}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏ {line}: {e}")
            errors.append(f"–û—à–∏–±–∫–∞ —Å {line}: {str(e)}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–∫—Å–∏: {added_count}\n"
    if errors:
        response += f"\n‚ùå –û—à–∏–±–∫–∏:\n" + "\n".join(errors[:5])

    context.user_data.clear()

    await update.message.reply_text(
        response,
        reply_markup=get_back_keyboard("accounts_proxy")
    )


async def list_proxy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    await query.answer()

    try:
        async with db_manager.get_async_session() as session:
            from sqlalchemy import select
            from database.models import Proxy

            result = await session.execute(select(Proxy))
            proxies = result.scalars().all()

            proxy_lines = []
            for proxy in proxies[:20]:
                proxy_lines.append(
                    f"{proxy.host}:{proxy.port} ‚Äî {proxy.protocol or 'http'}"
                )

        message = (
            "üß© –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏\n\n" +
            "\n".join(proxy_lines) +
            f"\n\n–í—Å–µ–≥–æ: {len(proxies)}"
        )

        await query.edit_message_text(
            message,
            reply_markup=get_back_keyboard("accounts_proxy")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
        await query.edit_message_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏",
            reply_markup=get_back_keyboard("accounts_proxy")
        )


async def bind_proxy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ–∫—Å–∏ –∫ –∞–∫–∫–∞—É–Ω—Ç—É"""
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞
    if query.data.startswith("bind_proxy_"):
        parts = query.data.split("_")
        if len(parts) == 4 and parts[2] == "to":
            # bind_proxy_ACCOUNT_ID_to_PROXY_ID
            account_id = int(parts[1])
            proxy_id = int(parts[3])

            await db_manager.update_account_proxy(account_id, proxy_id)

            await query.edit_message_text(
                "‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É!",
                reply_markup=get_back_keyboard("accounts_proxy")
            )
            return
        elif len(parts) == 3:
            # bind_proxy_ACCOUNT_ID - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏
            account_id = int(parts[2])

            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
            async with db_manager.get_async_session() as session:
                from sqlalchemy import select
                result = await session.execute(select(Proxy).where(Proxy.is_active == True))
                proxies = result.scalars().all()

            if not proxies:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏.",
                    reply_markup=get_back_keyboard("accounts_proxy")
                )
                return

            keyboard = []
            for proxy in proxies[:20]:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{proxy.host}:{proxy.port}",
                        callback_data=f"bind_proxy_{account_id}_to_{proxy.id}"
                    )
                ])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="bind_proxy")])

            await query.edit_message_text(
                "üåê –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    async with db_manager.get_async_session() as session:
        from sqlalchemy import select
        result = await session.execute(
            select(Account).where(Account.proxy_id == None)
        )
        accounts_without_proxy = result.scalars().all()

    if not accounts_without_proxy:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        all_accounts = await db_manager.get_accounts_by_type("influencer")
        all_accounts.extend(await db_manager.get_accounts_by_type("shiller"))

        if not all_accounts:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã.",
                reply_markup=get_back_keyboard("accounts_proxy")
            )
        else:
            await query.edit_message_text(
                "‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–æ–∫—Å–∏!",
                reply_markup=get_back_keyboard("accounts_proxy")
            )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    keyboard = []
    for acc in accounts_without_proxy[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        emoji = "üß†" if acc.account_type == "influencer" else "üì£"
        keyboard.append([
            InlineKeyboardButton(
                f"{emoji} @{acc.username}",
                callback_data=f"bind_proxy_{acc.id}"
            )
        ])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_proxy")])

    message = (
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø—Ä–æ–∫—Å–∏:\n\n"
        "üß† - –ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä\n"
        "üì£ - –®–∏–ª–ª–µ—Ä"
    )

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def add_hashtags_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'accounts_proxy'

    message = (
        "#Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö—ç—à—Ç–µ–≥–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n"
        "–ú–æ–∂–Ω–æ —Å # –∏–ª–∏ –±–µ–∑.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "#crypto\n"
        "#memecoin\n"
        "DeFi\n"
        "Web3"
    )

    await query.edit_message_text(
        message,
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'hashtags_input'


async def process_hashtags_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ö—ç—à—Ç–µ–≥–æ–≤"""
    if context.user_data.get('waiting_for') != 'hashtags_input':
        return

    text = update.message.text
    lines = text.strip().split('\n')
    hashtags = []

    for line in lines:
        tag = line.strip()
        if tag:
            # –î–æ–±–∞–≤–ª—è–µ–º # –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not tag.startswith('#'):
                tag = '#' + tag
            hashtags.append(tag)

    if hashtags:
        await db_manager.add_hashtags(hashtags)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤: {len(hashtags)}")
        message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤: {len(hashtags)}"
    else:
        message = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ö—ç—à—Ç–µ–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"

    context.user_data.clear()

    await update.message.reply_text(
        message,
        reply_markup=get_back_keyboard("accounts_proxy")
    )


async def list_hashtags_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤"""
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à—Ç–µ–≥–∏ –∏–∑ –ë–î
        async with db_manager.get_async_session() as session:
            from sqlalchemy import select
            result = await session.execute(select(Hashtag))
            hashtags = result.scalars().all()

        if not hashtags:
            message = "üìë –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤ –ø—É—Å—Ç"
        else:
            message = f"üìë –°–ø–∏—Å–æ–∫ —Ö—ç—à—Ç–µ–≥–æ–≤ ({len(hashtags)} —à—Ç.):\n\n"
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            by_category = {}
            for tag in hashtags:
                category = tag.category or "general"
                if category not in by_category:
                    by_category[category] = []
                by_category[category].append(tag.tag)

            for category, tags in by_category.items():
                message += f"\n{category.upper()}:\n"
                message += " ".join(tags[:10])
                if len(tags) > 10:
                    message += f" ... +{len(tags) - 10}"
                message += "\n"

        await query.edit_message_text(
            message,
            reply_markup=get_back_keyboard("accounts_proxy")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤",
            reply_markup=get_back_keyboard("accounts_proxy")
        )


async def delete_account_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()

    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if query.data.startswith("del_acc_"):
            account_id = int(query.data.split("_")[2])
            async with db_manager.get_async_session() as session:
                account = await session.get(Account, account_id)
                if account:
                    username = account.username
                    await session.delete(account)
                    await session.commit()
                    message = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç @{username} —É–¥–∞–ª–µ–Ω"
                else:
                    message = "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

            await query.edit_message_text(
                message,
                reply_markup=get_back_keyboard("accounts_proxy")
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        async with db_manager.get_async_session() as session:
            from sqlalchemy import select
            result = await session.execute(select(Account))
            accounts = result.scalars().all()

        if not accounts:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=get_back_keyboard("accounts_proxy")
            )
            return

        keyboard = []
        for acc in accounts[:20]:
            emoji = "üß†" if acc.account_type == "influencer" else "üì£"
            keyboard.append([
                InlineKeyboardButton(
                    f"{emoji} @{acc.username}",
                    callback_data=f"del_acc_{acc.id}"
                )
            ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_proxy")])

        await query.edit_message_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞",
            reply_markup=get_back_keyboard("accounts_proxy")
        )


async def delete_proxy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
    query = update.callback_query
    await query.answer()

    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if query.data.startswith("del_proxy_"):
            proxy_id = int(query.data.split("_")[2])
            async with db_manager.get_async_session() as session:
                proxy = await session.get(Proxy, proxy_id)
                if proxy:
                    host_port = f"{proxy.host}:{proxy.port}"
                    await session.delete(proxy)
                    await session.commit()
                    message = f"‚úÖ –ü—Ä–æ–∫—Å–∏ {host_port} —É–¥–∞–ª–µ–Ω–∞"
                else:
                    message = "‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            await query.edit_message_text(
                message,
                reply_markup=get_back_keyboard("accounts_proxy")
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        async with db_manager.get_async_session() as session:
            from sqlalchemy import select
            result = await session.execute(select(Proxy))
            proxies = result.scalars().all()

        if not proxies:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                reply_markup=get_back_keyboard("accounts_proxy")
            )
            return

        keyboard = []
        for proxy in proxies[:20]:
            keyboard.append([
                InlineKeyboardButton(
                    f"{proxy.host}:{proxy.port}",
                    callback_data=f"del_proxy_{proxy.id}"
                )
            ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="accounts_proxy")])

        await query.edit_message_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏",
            reply_markup=get_back_keyboard("accounts_proxy")
        )


async def form_rings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–µ—Ü —à–∏–ª–ª–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'accounts_proxy'

    message = (
        "üîó –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–µ—Ü —à–∏–ª–ª–µ—Ä–æ–≤\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–ª—å—Ü–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∏–ª–ª–µ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∫–æ–ª—å—Ü–µ).\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 4 —à–∏–ª–ª–µ—Ä–∞ –Ω–∞ –∫–æ–ª—å—Ü–æ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 8:"
    )

    await query.edit_message_text(
        message,
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'ring_size_input'


async def set_ring_size_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª—å—Ü–∞"""
    if context.user_data.get('waiting_for') != 'ring_size_input':
        return

    try:
        ring_size = int(update.message.text.strip())
        if 3 <= ring_size <= 8:
            context.user_data['ring_size'] = ring_size
            context.user_data['waiting_for'] = 'ring_formation'

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∏–ª–ª–µ—Ä–æ–≤
            shillers = await db_manager.get_accounts_by_type("shiller")
            available_count = len(shillers)
            rings_possible = available_count // ring_size

            message = (
                f"‚úÖ –†–∞–∑–º–µ—Ä –∫–æ–ª—å—Ü–∞: {ring_size}\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ —à–∏–ª–ª–µ—Ä–æ–≤: {available_count}\n"
                f"–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–ª–µ—Ü: {rings_possible}\n\n"
            )

            if rings_possible > 0:
                message += "–°–æ–∑–¥–∞—Ç—å –∫–æ–ª—å—Ü–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?"
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞", callback_data="auto_form_rings"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="accounts_proxy")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                message += "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∏–ª–ª–µ—Ä–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–µ—Ü"
                reply_markup = get_back_keyboard("accounts_proxy")

            await update.message.reply_text(message, reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "‚ùå –†–∞–∑–º–µ—Ä –∫–æ–ª—å—Ü–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 8",
                reply_markup=get_cancel_keyboard()
            )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=get_cancel_keyboard()
        )


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    previous_menu = context.user_data.get('previous_menu', 'accounts_proxy')

    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if previous_menu == 'influencers':
        from .influencers import influencers_menu_handler
        await influencers_menu_handler(update, context)
    elif previous_menu == 'shillers':
        from .shillers import shillers_menu_handler
        await shillers_menu_handler(update, context)
    elif previous_menu == 'configure_content':
        from .influencers import configure_content_handler
        await configure_content_handler(update, context)
    else:
        await accounts_proxy_menu_handler(update, context)