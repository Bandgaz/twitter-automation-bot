from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from datetime import datetime, timedelta
import asyncio

from ..keyboards.main_kb import get_influencers_keyboard, get_back_keyboard, get_cancel_keyboard
from database.db_manager import db_manager
from database.models import Account, InfluencerSource, Activity
from modules.influencers.activity_manager import InfluencerActivityManager
from utils.validators import validate_twitter_url, parse_target_accounts
from utils.twitter_helpers import validate_twitter_username

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
influencer_manager = None


async def influencers_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏
        async with db_manager.get_async_session() as session:
            from sqlalchemy import select
            result = await session.execute(
                select(Account).where(Account.account_type == "influencer")
            )
            influencers = result.scalars().all()
            active_count = sum(1 for acc in influencers if acc.status == "active")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        if influencer_manager is not None and hasattr(influencer_manager, 'is_running') and influencer_manager.is_running:
            manager_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"

        message = (
            "üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º–∏\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: {len(influencers)}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {manager_status}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        await query.edit_message_text(
            message,
            reply_markup=get_influencers_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤",
            reply_markup=get_back_keyboard("main_menu")
        )


async def configure_content_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="add_source_accounts")],
        [InlineKeyboardButton("üîó –ü—Ä–∏—Å–≤–æ–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="assign_source")],
        [InlineKeyboardButton("üìà –ù–∞—Å—Ç—Ä–æ–∏—Ç—å NI", callback_data="set_ni")],
        [InlineKeyboardButton("üìÖ –ß–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="set_post_frequency")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="influencers")]
    ]

    message = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
        "‚Ä¢ –ü—Ä–∏—Å–≤–æ–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (NI)\n"
        "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
    )

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def add_source_accounts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'configure_content'

    message = (
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
        "–∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∫–∏.\n\n"
        "–ü–æ –æ–¥–Ω–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –º–æ–∂–Ω–æ —Å @ –∏–ª–∏ –±–µ–∑:\n"
        "```\n"
        "@elonmusk\n"
        "VitalikButerin\n"
        "@cz_binance\n"
        "```"
    )

    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'source_accounts_input'


async def process_source_accounts_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    if context.user_data.get('waiting_for') != 'source_accounts_input':
        return

    text = update.message.text
    accounts = parse_target_accounts(text)

    if accounts:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.user_data['source_accounts'] = accounts
        message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(accounts)}\n\n"
        message += "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–≤–æ–∏—Ç—å —ç—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º."
    else:
        message = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"

    context.user_data['waiting_for'] = None

    await update.message.reply_text(
        message,
        reply_markup=get_back_keyboard("configure_content")
    )


async def assign_source_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º"""
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞
    if query.data.startswith("assign_source_"):
        influencer_id = int(query.data.split("_")[2])
        context.user_data['selected_influencer'] = influencer_id

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        source_accounts = context.user_data.get('source_accounts', [])
        if not source_accounts:
            await query.edit_message_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∏",
                reply_markup=get_back_keyboard("configure_content")
            )
            return

        keyboard = []
        for source in source_accounts[:20]:
            keyboard.append([
                InlineKeyboardButton(
                    f"@{source}",
                    callback_data=f"select_source_{source}"
                )
            ])

        keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="configure_content")])

        message = "üîó –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):"

        await query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    if query.data.startswith("select_source_"):
        source = query.data.split("select_source_")[1]
        influencer_id = context.user_data.get('selected_influencer')

        if influencer_id:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—É
            async with db_manager.get_async_session() as session:
                source_entry = InfluencerSource(
                    influencer_id=influencer_id,
                    source_username=source,
                    importance_score=1.0
                )
                session.add(source_entry)
                await session.commit()

            await query.answer(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ @{source} –¥–æ–±–∞–≤–ª–µ–Ω")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    influencers = await db_manager.get_accounts_by_type("influencer")

    if not influencers:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤",
            reply_markup=get_back_keyboard("configure_content")
        )
        return

    keyboard = []
    for inf in influencers[:20]:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        source_count = len(inf.influencer_sources) if inf.influencer_sources else 0
        keyboard.append([
            InlineKeyboardButton(
                f"@{inf.username} (–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {source_count})",
                callback_data=f"assign_source_{inf.id}"
            )
        ])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="configure_content")])

    message = "üîó –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞ –¥–ª—è –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:"

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def set_ni_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ NI (–≤–∞–∂–Ω–æ—Å—Ç–∏) –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    query = update.callback_query
    await query.answer()

    message = (
        "üìà –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NI (–≤–∞–∂–Ω–æ—Å—Ç–∏) –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"
        "NI –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
        "–ß–µ–º –≤—ã—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —á–∞—â–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫.\n\n"
        "–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.1 –¥–æ 5.0\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1.0\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏."
    )

    await query.edit_message_text(
        message,
        reply_markup=get_back_keyboard("configure_content")
    )


async def set_post_frequency_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'configure_content'

    message = (
        "üìÖ –ß–∞—Å—Ç–æ—Ç–∞ —Å—É—Ç–æ—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞.\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 1-3 –ø–æ—Å—Ç–∞ –≤ —Å—É—Ç–∫–∏.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ:"
    )

    await query.edit_message_text(
        message,
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'post_frequency_input'


async def process_post_frequency_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    if context.user_data.get('waiting_for') != 'post_frequency_input':
        return

    try:
        frequency = int(update.message.text.strip())
        if 1 <= frequency <= 10:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ—Ö –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
            async with db_manager.get_async_session() as session:
                from sqlalchemy import update
                await session.execute(
                    update(Account)
                    .where(Account.account_type == "influencer")
                    .values(posts_per_day=frequency)
                )
                await session.commit()

            message = f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞: {frequency} –ø–æ—Å—Ç–æ–≤ –≤ —Å—É—Ç–∫–∏"
        else:
            message = "‚ùå –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"
    except ValueError:
        message = "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ"

    context.user_data['waiting_for'] = None

    await update.message.reply_text(
        message,
        reply_markup=get_back_keyboard("configure_content")
    )


async def configure_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    influencers = await db_manager.get_accounts_by_type("influencer")
    if influencers:
        avg_comments = sum(acc.comments_per_day for acc in influencers) / len(influencers)
        avg_likes = sum(acc.likes_per_day for acc in influencers) / len(influencers)
    else:
        avg_comments = 20
        avg_likes = 50

    message = (
        "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Å—Ä–µ–¥–Ω–µ–µ):\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ —Å—É—Ç–∫–∏: {avg_comments:.0f}\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤ –≤ —Å—É—Ç–∫–∏: {avg_likes:.0f}\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_comments <—á–∏—Å–ª–æ> - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å—É—Ç–∫–∏\n"
        "/set_likes <—á–∏—Å–ª–æ> - –ª–∞–π–∫–∏ –≤ —Å—É—Ç–∫–∏\n"
        "/set_sleep <—á–∞—Å—ã_—Ä–∞–±–æ—Ç—ã> <—á–∞—Å—ã_—Å–Ω–∞> - —Ä–µ–∂–∏–º —Å–Ω–∞"
    )

    await query.edit_message_text(
        message,
        reply_markup=get_back_keyboard("influencers")
    )


async def start_influencer_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    global influencer_manager

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
        if influencer_manager is not None and hasattr(influencer_manager,
                                                      'is_running') and influencer_manager.is_running:
            await query.edit_message_text(
                "‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=get_back_keyboard("influencers")
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
        influencers = await db_manager.get_accounts_by_type("influencer")
        if not influencers:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞",
                reply_markup=get_back_keyboard("influencers")
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        has_sources = False
        for inf in influencers:
            if inf.influencer_sources:
                has_sources = True
                break

        if not has_sources:
            await query.edit_message_text(
                "‚ùå –ù–∏ —É –æ–¥–Ω–æ–≥–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
                reply_markup=get_back_keyboard("influencers")
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        from modules.influencers.activity_manager import InfluencerActivityManager
        influencer_manager = InfluencerActivityManager()
        await influencer_manager.start()

        message = (
            "üöÄ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!\n\n"
            "–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ 24/7.\n"
            "–ö–∞–∂–¥—ã–π –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä –±—É–¥–µ—Ç:\n"
            "‚Ä¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫—Ä—É–ø–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
            "‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏\n"
            "‚Ä¢ –î–µ–ª–∞—Ç—å –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã\n\n"
            "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤."
        )

        await query.edit_message_text(
            message,
            reply_markup=get_back_keyboard("influencers")
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
            reply_markup=get_back_keyboard("influencers")
        )


async def quote_mode_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–∂–∏–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    # –ï—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    if query.data == "set_memecoin_account":
        message = (
            "üë§ –£–∫–∞–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –º–µ–º–∫–æ–∏–Ω–∞\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ username –∞–∫–∫–∞—É–Ω—Ç–∞ (—Å @ –∏–ª–∏ –±–µ–∑):"
        )
        context.user_data['waiting_for'] = 'memecoin_account_input'
        await query.edit_message_text(
            message,
            reply_markup=get_cancel_keyboard()
        )
        return

    elif query.data == "set_quote_post":
        if not context.user_data.get('memecoin_account'):
            await query.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –º–µ–º–∫–æ–∏–Ω–∞", show_alert=True)
            return

        message = (
            "üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Twitter:"
        )
        context.user_data['waiting_for'] = 'quote_post_input'
        await query.edit_message_text(
            message,
            reply_markup=get_cancel_keyboard()
        )
        return

    elif query.data == "start_mass_quote":
        memecoin_account = context.user_data.get('memecoin_account')
        quote_post = context.user_data.get('quote_post')

        if not memecoin_account:
            await query.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç –º–µ–º–∫–æ–∏–Ω–∞", show_alert=True)
            return

        if not quote_post:
            await query.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç", show_alert=True)
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Å–æ–≤–æ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        await query.edit_message_text(
            f"üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{memecoin_account}\n"
            f"üîó –ü–æ—Å—Ç: {quote_post}\n\n"
            f"–í—Å–µ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã –Ω–∞—á–Ω—É—Ç —Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç.",
            reply_markup=get_back_keyboard("influencers")
        )

        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        return

    # –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∂–∏–º–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = []

    memecoin_account = context.user_data.get('memecoin_account')
    quote_post = context.user_data.get('quote_post')

    # –ö–Ω–æ–ø–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    account_text = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç: @{memecoin_account}" if memecoin_account else "‚ùå –£–∫–∞–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –º–µ–º–∫–æ–∏–Ω–∞"
    keyboard.append([InlineKeyboardButton(account_text, callback_data="set_memecoin_account")])

    # –ö–Ω–æ–ø–∫–∞ —Å—Å—ã–ª–∫–∏
    post_text = "‚úÖ –°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞" if quote_post else "‚ùå –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç"
    keyboard.append([InlineKeyboardButton(post_text, callback_data="set_quote_post")])

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
    keyboard.append([InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="start_mass_quote")])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="influencers")])

    message = (
        "üó£ –†–µ–∂–∏–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—Å–µ–º –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º "
        "–ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –º–µ–º–∫–æ–∏–Ω–∞.\n\n"
        "–®–∞–≥–∏:\n"
        "1Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è\n"
        "2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç\n"
        "3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
    )

    if memecoin_account:
        message += f"üë§ –ê–∫–∫–∞—É–Ω—Ç: @{memecoin_account}\n"
    if quote_post:
        message += f"üîó –ü–æ—Å—Ç: –≥–æ—Ç–æ–≤ –∫ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n"

    await query.edit_message_text(
        message,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def process_memecoin_account_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –º–µ–º–∫–æ–∏–Ω–∞"""
    if context.user_data.get('waiting_for') != 'memecoin_account_input':
        return

    account = update.message.text.strip().replace('@', '')

    if validate_twitter_username(account):
        context.user_data['memecoin_account'] = account
        message = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç –º–µ–º–∫–æ–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: @{account}"
    else:
        message = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username"

    context.user_data['waiting_for'] = None

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–∂–∏–º–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await update.message.reply_text(message)
    await asyncio.sleep(1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–∂–∏–º–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    query_update = Update(update.update_id, callback_query=update.callback_query)
    query_update.callback_query.data = "quote_mode"
    await quote_mode_handler(query_update, context)


async def process_quote_post_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç"""
    if context.user_data.get('waiting_for') != 'quote_post_input':
        return

    link = update.message.text.strip()

    if validate_twitter_url(link):
        context.user_data['quote_post'] = link
        message = "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞"
    else:
        message = "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Twitter –ø–æ—Å—Ç"

    context.user_data['waiting_for'] = None

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ä–µ–∂–∏–º–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await update.message.reply_text(message)
    await asyncio.sleep(1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–∂–∏–º–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    query_update = Update(update.update_id, callback_query=update.callback_query)
    query_update.callback_query.data = "quote_mode"
    await quote_mode_handler(query_update, context)


async def influencer_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–∞–º"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤
    influencers = await db_manager.get_accounts_by_type("influencer")

    if not influencers:
        await query.edit_message_text(
            "üìä –ù–µ—Ç –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_back_keyboard("influencers")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()

    async with db_manager.get_async_session() as session:
        from sqlalchemy import select, func, and_

        stats_message = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"

        for inf in influencers[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            result = await session.execute(
                select(
                    Activity.action_type,
                    func.count(Activity.id)
                )
                .where(
                    and_(
                        Activity.account_id == inf.id,
                        func.date(Activity.created_at) == today
                    )
                )
                .group_by(Activity.action_type)
            )

            activities = dict(result.all())

            posts = activities.get('tweet', 0)
            comments = activities.get('comment', 0)
            likes = activities.get('like', 0)
            quotes = activities.get('quote', 0)

            stats_message += (
                f"@{inf.username}:\n"
                f"üìù –ü–æ—Å—Ç–æ–≤: {posts}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments}\n"
                f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {likes}\n"
                f"üîÅ –¶–∏—Ç–∞—Ç: {quotes}\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {inf.followers_count}\n\n"
            )

        if len(influencers) > 10:
            stats_message += f"... –∏ –µ—â–µ {len(influencers) - 10} –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤"

    await query.edit_message_text(
        stats_message,
        reply_markup=get_back_keyboard("influencers")
    )