from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from loguru import logger
from datetime import datetime

from ..keyboards.main_kb import get_shillers_keyboard, get_back_keyboard, get_cancel_keyboard
from database.db_manager import db_manager
from database.models import Account, ShillerRing, ShillerTarget, Campaign
from modules.shillers.shilling_engine import ShillingEngine
from utils.validators import validate_token_address, validate_twitter_url, parse_target_accounts

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ —à–∏–ª–ª–∏–Ω–≥–∞
shilling_engine = None


async def shillers_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω—é —à–∏–ª–ª–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    shillers = await db_manager.get_accounts_by_type("shiller")

    async with db_manager.get_async_session() as session:
        from sqlalchemy import select, func

        # –ö–æ–ª—å—Ü–∞
        rings_result = await session.execute(
            select(func.count(ShillerRing.id)).where(ShillerRing.is_active == True)
        )
        rings_count = rings_result.scalar()

        # –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è
        campaign = await db_manager.get_active_campaign()

    # –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞
    engine_status = "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if shilling_engine and shilling_engine.is_running:
        engine_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"

    message = (
        "üì£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∏–ª–ª–µ—Ä–∞–º–∏\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —à–∏–ª–ª–µ—Ä–æ–≤: {len(shillers)}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–µ—Ü: {rings_count}\n"
        f"‚Ä¢ –ö–∞–º–ø–∞–Ω–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if campaign else '‚ùå –ù–µ—Ç'}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å –¥–≤–∏–∂–∫–∞: {engine_status}\n\n"
    )

    if campaign:
        message += (
            f"üí∞ –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${campaign.token_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {campaign.token_address[:8]}...{campaign.token_address[-6:]}\n\n"
        )

    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await query.edit_message_text(
        message,
        reply_markup=get_shillers_keyboard()
    )


async def configure_targets_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–µ—Ü
    async with db_manager.get_async_session() as session:
        from sqlalchemy import select
        result = await session.execute(select(ShillerRing))
        rings = result.scalars().all()

    if not rings:
        await query.edit_message_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–æ–ª—å—Ü–∞ —à–∏–ª–ª–µ—Ä–æ–≤!",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    # –°—á–∏—Ç–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏—à–µ–Ω–µ–π
    total_targets_needed = sum(ring.size * ring.targets_per_shiller for ring in rings)

    message = (
        "üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏—à–µ–Ω–µ–π —à–∏–ª–ª–∏–Ω–≥–∞\n\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ—Ü: {len(rings)}\n"
        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏—à–µ–Ω–µ–π: {total_targets_needed}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –∫—Ä—É–ø–Ω—ã—Ö Twitter –∞–∫–∫–∞—É–Ω—Ç–æ–≤.\n"
        "–ü–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –º–æ–∂–Ω–æ —Å @ –∏–ª–∏ –±–µ–∑:\n\n"
        "```\n"
        "@binance\n"
        "coinbase\n"
        "@VitalikButerin\n"
        "solana\n"
        "```"
    )

    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'targets_input'
    context.user_data['total_targets_needed'] = total_targets_needed


async def process_targets_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π"""
    if context.user_data.get('waiting_for') != 'targets_input':
        return

    text = update.message.text
    targets = parse_target_accounts(text)
    total_needed = context.user_data.get('total_targets_needed', 40)

    if len(targets) < total_needed:
        message = (
            f"‚ö†Ô∏è –í–≤–µ–¥–µ–Ω–æ –º–∏—à–µ–Ω–µ–π: {len(targets)}\n"
            f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º: {total_needed}\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤."
        )
        await update.message.reply_text(message)
        return

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏—à–µ–Ω–∏ –ø–æ –∫–æ–ª—å—Ü–∞–º
    async with db_manager.get_async_session() as session:
        from sqlalchemy import select
        result = await session.execute(select(ShillerRing).where(ShillerRing.is_active == True))
        rings = result.scalars().all()

        target_index = 0
        for ring in rings:
            targets_for_ring = ring.size * ring.targets_per_shiller
            ring_targets = targets[target_index:target_index + targets_for_ring]

            # –î–æ–±–∞–≤–ª—è–µ–º –º–∏—à–µ–Ω–∏ –¥–ª—è –∫–æ–ª—å—Ü–∞
            for target in ring_targets:
                target_entry = ShillerTarget(
                    ring_id=ring.id,
                    target_username=target,
                    is_active=True
                )
                session.add(target_entry)

            target_index += targets_for_ring

        await session.commit()

    message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∏—à–µ–Ω–µ–π: {len(targets)}\n"
    message += f"üìç –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ {len(rings)} –∫–æ–ª—å—Ü–∞–º"

    context.user_data.clear()

    await update.message.reply_text(
        message,
        reply_markup=get_back_keyboard("shillers")
    )


async def set_token_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —à–∏–ª–ª–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
    context.user_data['previous_menu'] = 'shillers'

    message = (
        "üí∞ –£–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —à–∏–ª–ª–∏–Ω–≥–∞\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞`\n"
        "`–ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞`\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "```\n"
        "BANDGAZ\n"
        "0x1234567890abcdef1234567890abcdef12345678\n"
        "```"
    )

    await query.edit_message_text(
        message,
        parse_mode="Markdown",
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'token_input'


async def process_token_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
    if context.user_data.get('waiting_for') != 'token_input':
        return

    lines = update.message.text.strip().split('\n')

    if len(lines) < 2:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö",
            reply_markup=get_cancel_keyboard()
        )
        return

    token_name = lines[0].strip()
    token_address = lines[1].strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
    if not validate_token_address(token_address):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ —Ç–æ–∫–µ–Ω–∞",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['token_name'] = token_name
    context.user_data['token_address'] = token_address
    context.user_data['waiting_for'] = None

    message = (
        f"‚úÖ –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n"
        f"üí∞ ${token_name}\n"
        f"üìç {token_address}\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
    )

    await update.message.reply_text(
        message,
        reply_markup=get_back_keyboard("shillers")  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ shillers
    )


async def add_quote_link_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    await query.answer()

    if not context.user_data.get('token_name'):
        await query.edit_message_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è —à–∏–ª–ª–∏–Ω–≥–∞",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    message = (
        "üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç Twitter, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç "
        "—Ü–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∏–ª–ª–µ—Ä—ã.\n\n"
        "–≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å—Ç –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –º–µ–º–∫–æ–∏–Ω–∞."
    )

    await query.edit_message_text(
        message,
        reply_markup=get_cancel_keyboard()
    )

    context.user_data['waiting_for'] = 'quote_link_input'


async def process_quote_link_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if context.user_data.get('waiting_for') != 'quote_link_input':
        return

    link = update.message.text.strip()

    if not validate_twitter_url(link):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Twitter –ø–æ—Å—Ç",
            reply_markup=get_cancel_keyboard()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    token_name = context.user_data.get('token_name')
    token_address = context.user_data.get('token_address')

    if token_name and token_address:
        campaign = await db_manager.create_campaign(
            name=f"Campaign {token_name}",
            token_name=token_name,
            token_address=token_address,
            quote_link=link
        )

        message = (
            f"‚úÖ –ö–∞–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üí∞ –¢–æ–∫–µ–Ω: ${token_name}\n"
            f"üìç –ê–¥—Ä–µ—Å: {token_address[:8]}...{token_address[-6:]}\n"
            f"üîó –ü–æ—Å—Ç –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —à–∏–ª–ª–∏–Ω–≥!"
        )
    else:
        message = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏"

    context.user_data.clear()

    await update.message.reply_text(
        message,
        reply_markup=get_back_keyboard("shillers")
    )


async def configure_shiller_activity_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —à–∏–ª–ª–µ—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    async with db_manager.get_async_session() as session:
        from sqlalchemy import select
        result = await session.execute(select(ShillerRing).limit(1))
        ring = result.scalar()

    if ring:
        targets_per_shiller = ring.targets_per_shiller
        comments_per_round = ring.comments_per_round
    else:
        targets_per_shiller = 10
        comments_per_round = 10

    message = (
        "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —à–∏–ª–ª–µ—Ä–æ–≤\n\n"
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"üéØ –ú–∏—à–µ–Ω–µ–π –Ω–∞ —à–∏–ª–ª–µ—Ä–∞: {targets_per_shiller}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–æ–≤ –∑–∞ –∫—Ä—É–≥: {comments_per_round}\n\n"
        "–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–∞–Ω–æ–≤.\n"
        "–ò–∑–º–µ–Ω—è—Ç—å –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è."
    )

    await query.edit_message_text(
        message,
        reply_markup=get_back_keyboard("shillers")
    )


async def start_shilling_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ —à–∏–ª–ª–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()

    global shilling_engine

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    campaign = await db_manager.get_active_campaign()
    if not campaign:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏. –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω.",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª—å—Ü–∞
    async with db_manager.get_async_session() as session:
        from sqlalchemy import select
        result = await session.execute(
            select(ShillerRing).where(ShillerRing.is_active == True)
        )
        rings = result.scalars().all()

    if not rings:
        await query.edit_message_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–ª–µ—Ü —à–∏–ª–ª–µ—Ä–æ–≤",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏—à–µ–Ω–∏
    has_targets = all(len(ring.targets) > 0 for ring in rings)
    if not has_targets:
        await query.edit_message_text(
            "‚ùå –ù–µ –≤—Å–µ –∫–æ–ª—å—Ü–∞ –∏–º–µ—é—Ç –º–∏—à–µ–Ω–∏",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
    if shilling_engine and shilling_engine.is_running:
        await query.edit_message_text(
            "‚ö†Ô∏è –®–∏–ª–ª–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    shilling_engine = ShillingEngine(campaign)
    await shilling_engine.start()

    message = (
        "üöÄ –®–∏–ª–ª–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n\n"
        f"üí∞ –¢–æ–∫–µ–Ω: ${campaign.token_name}\n"
        f"üîó –ö–æ–ª–µ—Ü –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {len(rings)}\n\n"
        "–ö–æ–ª—å—Ü–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.\n"
        "–ö–∞–∂–¥–æ–µ –∫–æ–ª—å—Ü–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç:\n"
        "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–¥ –º–∏—à–µ–Ω—è–º–∏\n"
        "‚Ä¢ –õ–∞–π–∫–∏ –∏ –æ—Ç–≤–µ—Ç—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É\n"
        "‚Ä¢ –¶–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Ç–æ–∫–µ–Ω–∞\n\n"
        "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
    )

    await query.edit_message_text(
        message,
        reply_markup=get_back_keyboard("shillers")
    )


async def shilling_stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∏–ª–ª–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    campaign = await db_manager.get_active_campaign()

    if not campaign:
        await query.edit_message_text(
            "üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    async with db_manager.get_async_session() as session:
        from sqlalchemy import select, func
        from database.models import Activity

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()

        result = await session.execute(
            select(
                Activity.action_type,
                func.count(Activity.id)
            )
            .where(
                Activity.campaign_id == campaign.id,
                func.date(Activity.created_at) == today
            )
            .group_by(Activity.action_type)
        )

        stats = dict(result.all())

    message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∏–ª–ª–∏–Ω–≥–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"
        f"üí∞ –ö–∞–º–ø–∞–Ω–∏—è: ${campaign.token_name}\n"
        f"üìÖ –î–∞—Ç–∞: {today}\n\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats.get('comment', 0)}\n"
        f"‚ù§Ô∏è –õ–∞–π–∫–æ–≤: {stats.get('like', 0)}\n"
        f"üîÅ –¶–∏—Ç–∞—Ç: {stats.get('quote', 0)}\n\n"
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–ª—å—Ü–∞–º
    if shilling_engine and shilling_engine.is_running:
        message += "üü¢ –î–≤–∏–∂–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω\n"
        message += f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞—É–Ω–¥–æ–≤: {shilling_engine.rounds_completed}\n"
    else:
        message += "üî¥ –î–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"

    await query.edit_message_text(
        message,
        reply_markup=get_back_keyboard("shillers")
    )


async def stop_shilling_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏–ª–ª–∏–Ω–≥–∞"""
    query = update.callback_query
    await query.answer()

    global shilling_engine

    if not shilling_engine or not shilling_engine.is_running:
        await query.edit_message_text(
            "‚ö†Ô∏è –®–∏–ª–ª–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω",
            reply_markup=get_back_keyboard("shillers")
        )
        return

    await shilling_engine.stop()

    message = "üõë –®–∏–ª–ª–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"

    await query.edit_message_text(
        message,
        reply_markup=get_back_keyboard("shillers")
    )


async def clear_campaign_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏"""
    query = update.callback_query
    await query.answer()

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–º–ø–∞–Ω–∏—é
    campaign = await db_manager.get_active_campaign()

    if campaign:
        async with db_manager.get_async_session() as session:
            campaign_db = await session.get(Campaign, campaign.id)
            campaign_db.is_active = False
            campaign_db.ended_at = datetime.utcnow()
            await session.commit()

        message = "üßπ –î–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏ –æ—á–∏—â–µ–Ω—ã!"
    else:
        message = "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏"

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.user_data.clear()

    await query.edit_message_text(
        message,
        reply_markup=get_back_keyboard("shillers")
    )