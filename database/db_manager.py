from sqlalchemy import create_engine, select, func
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from contextlib import contextmanager, asynccontextmanager
from typing import Optional, List, Dict, Any
import asyncio
from loguru import logger
from sqlalchemy.orm import selectinload
from config import DATABASE_URL
from .models import Base, Account, Proxy, Campaign, ShillerRing, ShillerRingMember, Hashtag


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self):
        self.engine = None
        self.async_engine = None
        self.SessionLocal = None
        self.AsyncSessionLocal = None

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ URL –¥–ª—è async
        if DATABASE_URL.startswith("sqlite"):
            async_url = DATABASE_URL.replace("sqlite://", "sqlite+aiosqlite://")
        else:
            async_url = DATABASE_URL

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å URL: {async_url}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–æ–≤
        self.engine = create_engine(DATABASE_URL, echo=False)
        self.async_engine = create_async_engine(async_url, echo=False)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫ —Å–µ—Å—Å–∏–π
        self.SessionLocal = sessionmaker(bind=self.engine)
        self.AsyncSessionLocal = async_sessionmaker(bind=self.async_engine)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        async with self.async_engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
            logger.info("–¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã")

        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    @contextmanager
    def get_session(self) -> Session:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        session = self.SessionLocal()
        try:
            yield session
            session.commit()
        except Exception as e:
            session.rollback()
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
            raise
        finally:
            session.close()

    @asynccontextmanager
    async def get_async_session(self) -> AsyncSession:
        """–ü–æ–ª—É—á–∏—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        async with self.AsyncSessionLocal() as session:
            try:
                yield session
                await session.commit()
            except Exception as e:
                await session.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ –≤ async —Å–µ—Å—Å–∏–∏ –ë–î: {e}")
                raise
            finally:
                await session.close()

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ ===

    async def add_account(self, username: str, password: str,
                          account_type: str, **kwargs) -> Account:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç"""
        async with self.get_async_session() as session:
            account = Account(
                username=username,
                password=password,
                account_type=account_type,
                **kwargs
            )
            session.add(account)
            await session.commit()
            await session.refresh(account)
            return account

    async def get_account(self, account_id: int) -> Optional[Account]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –ø–æ ID"""
        async with self.get_async_session() as session:
            return await session.get(Account, account_id)

    async def get_accounts_by_type(self, account_type: str) -> List[Account]:
        async with self.get_async_session() as session:
            result = await session.execute(
                select(Account)
                .where(Account.account_type == account_type)
                .options(
                    selectinload(Account.influencer_sources),
                    selectinload(Account.activities),
                    selectinload(Account.proxy)
                )
            )
            return result.scalars().all()

    async def update_account_status(self, account_id: int, status: str):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞"""
        async with self.get_async_session() as session:
            account = await session.get(Account, account_id)
            if account:
                account.status = status
                await session.commit()

    async def update_account_proxy(self, account_id: int, proxy_id: int):
        async with self.get_async_session() as session:
            from sqlalchemy import select
            from sqlalchemy.exc import InvalidRequestError

            logger.debug(f"üîÅ –ü—Ä–∏–≤—è–∑–∫–∞ proxy_id={proxy_id} –∫ account_id={account_id}")

            try:
                result = await session.execute(select(Account).where(Account.id == account_id))
                account = result.scalar_one_or_none()

                if not account:
                    logger.error(f"‚ùå Account —Å id={account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                account.proxy_id = proxy_id
                await session.commit()

                logger.success(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account.username}")
            except InvalidRequestError as e:
                logger.exception("SQLAlchemy session error (detached instance):")
            except Exception as e:
                logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:")

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–∫—Å–∏ ===

    async def add_proxy(self, host: str, port: int, **kwargs) -> Proxy:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–∫—Å–∏"""
        async with self.get_async_session() as session:
            proxy = Proxy(host=host, port=port, **kwargs)
            session.add(proxy)
            await session.commit()
            await session.refresh(proxy)
            return proxy

    async def get_free_proxy(self) -> Optional[Proxy]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω—É—é –ø—Ä–æ–∫—Å–∏"""
        async with self.get_async_session() as session:
            # –ü—Ä–æ–∫—Å–∏ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            result = await session.execute(
                select(Proxy)
                .where(Proxy.is_active == True)
                .where(~Proxy.accounts.any())
            )
            return result.scalars().first()

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª—å—Ü–∞–º–∏ —à–∏–ª–ª–µ—Ä–æ–≤ ===

    async def create_shiller_ring(self, name: str, size: int = 4) -> ShillerRing:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ–ª—å—Ü–æ —à–∏–ª–ª–µ—Ä–æ–≤"""
        async with self.get_async_session() as session:
            ring = ShillerRing(name=name, size=size)
            session.add(ring)
            await session.commit()
            await session.refresh(ring)
            return ring

    async def add_shiller_to_ring(self, ring_id: int, account_id: int, position: int):
        """–î–æ–±–∞–≤–∏—Ç—å —à–∏–ª–ª–µ—Ä–∞ –≤ –∫–æ–ª—å—Ü–æ"""
        async with self.get_async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –∏ –∫–æ–ª—å—Ü–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            account = await session.get(Account, account_id)
            ring = await session.get(ShillerRing, ring_id)

            if account and ring:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É-—Å–≤—è–∑–∫—É
                from sqlalchemy import insert
                stmt = insert(ShillerRingMember).values(
                    ring_id=ring_id,
                    account_id=account_id,
                    position=position
                )
                await session.execute(stmt)
                await session.commit()

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–ø–∞–Ω–∏—è–º–∏ ===

    async def create_campaign(self, name: str, token_name: str,
                              token_address: str, quote_link: str = None) -> Campaign:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é"""
        async with self.get_async_session() as session:
            campaign = Campaign(
                name=name,
                token_name=token_name,
                token_address=token_address,
                quote_link=quote_link
            )
            session.add(campaign)
            await session.commit()
            await session.refresh(campaign)
            return campaign

    async def get_active_campaign(self) -> Optional[Campaign]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é"""
        async with self.get_async_session() as session:
            result = await session.execute(
                select(Campaign).where(Campaign.is_active == True)
            )
            return result.scalars().first()

    # === –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ ===

    async def add_hashtags(self, hashtags: List[str], category: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∏"""
        async with self.get_async_session() as session:
            for tag in hashtags:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                result = await session.execute(
                    select(Hashtag).where(Hashtag.tag == tag)
                )
                if not result.scalars().first():
                    hashtag = Hashtag(tag=tag, category=category)
                    session.add(hashtag)
            await session.commit()

    async def get_random_hashtags(self, count: int = 3) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏"""
        async with self.get_async_session() as session:
            result = await session.execute(
                select(Hashtag).order_by(func.random()).limit(count)
            )
            hashtags = result.scalars().all()
            return [h.tag for h in hashtags]

    # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===

    async def get_statistics(self, account_type: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        async with self.get_async_session() as session:
            stats = {}

            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            if account_type:
                result = await session.execute(
                    select(func.count(Account.id)).where(Account.account_type == account_type)
                )
            else:
                result = await session.execute(select(func.count(Account.id)))
            stats['total_accounts'] = result.scalar()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
            result = await session.execute(
                select(func.count(Proxy.id)).where(Proxy.is_active == True)
            )
            stats['active_proxies'] = result.scalar()

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–º–ø–∞–Ω–∏–π
            result = await session.execute(select(func.count(Campaign.id)))
            stats['total_campaigns'] = result.scalar()

            return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
db_manager = DatabaseManager()


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await db_manager.initialize()


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
get_session = db_manager.get_session
get_async_session = db_manager.get_async_session